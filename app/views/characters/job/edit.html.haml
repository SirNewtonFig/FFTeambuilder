- content_for :heading do
  .flex.items-center
    %h2.text-xl Select Job:
    .flex-1.ml-4.relative
      .absolute.inset-y-0.left-0.flex.items-center.pl-1.pointer-events-none
        %svg.w-5.h-5.text-menu-dark{"aria-hidden" => "true", fill: "none", stroke: "currentColor", viewbox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg"}
          %path{d: "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z", "stroke-linecap" => "round", "stroke-linejoin" => "round", "stroke-width" => "2"}

      %input.pl-8.w-full{ type: 'search', placeholder: 'Filter', class: text_field_classes, data: { action: 'quick-filter#filter', controller: 'quick-filter', quick_filter_filterable_outlet: '.filterable' } }

.divide-y.divide-menu-dark.w-full{ class: 'sm:w-[28rem]' }
  - @jobs.each do |job|
    .filterable.-mx-2.px-2.py-3.cursor-pointer{ class: 'hover:bg-menu-dark/25 min-h-[6.75rem]', data: { controller: 'filterable' } }
      .flex.justify-between.items-center
        .text-lg.text-red-900= job.name
        .text-cyan-900 #{job.prerequisite_jp} JP
      .mt-1
        = form_with(url: character_job_path(character_id: params[:character_id]), method: :patch, data: { controller: "form #{'auto-scroll' if job == @char.job}", form_modal_outlet: '.modal-controller', turbo_frame: '_top' }) do |f|
          = tag.button(class: 'w-full', data: { action: 'form#submit' }) do
            %input{ type: 'hidden', name: "character[job]", value: job.id }
              .flex
                .px-2
                  - if job.generic?
                    = image_tag("sprites/generics/#{job.name}-#{@char.sex}.png".downcase, class: 'object-cover h-22 w-14')
                  - else
                    = image_tag("sprites/monsters/placeholder.png".downcase, class: 'object-cover h-22 w-14')

                .ml-4
                  .flex-1.flex
                    - ['hp', 'mp'].each do |prop|
                      .flex.flex-col.text-left.w-12
                        .text-red-900.capitalize.text-xs #{prop.dasherize.upcase}
                        = job.data[@char.sex][prop]

                    - ['attack', 'magic', 'speed'].each do |prop|
                      .flex.flex-col.text-left.w-12
                        .text-red-900.capitalize.text-xs #{stat_label(prop)}
                        = job.data[@char.sex][prop]

                  .mt-2.flex-1.flex
                    - ['move', 'jump'].each do |prop|
                      .flex.flex-col.text-left.w-12
                        .text-red-900.capitalize.text-xs #{stat_label(prop)}
                        = job.data[@char.sex][prop]

                    .flex.flex-col.text-left.w-12
                      .text-red-900.capitalize.text-xs P-EV
                      #{job.data[@char.sex]['evade']}%

                    .flex.flex-col.text-left.w-12
                      .text-red-900.capitalize.text-xs M-EV
                      #{job.data[@char.sex]['m_evade']}%

              - if job.data[@char.sex]['innate'].present?
                .mt-2.flex.flex-wrap
                  .flex.mr-6
                    .text-red-900.capitalize Innate:
                    .ml-2.text-left= job.data[@char.sex]['innate']

              - if job.data[@char.sex]['notes'].present?
                .mt-2.flex.flex-wrap
                  .flex.mr-6
                    .text-red-900.capitalize Notes:
                    .ml-2.text-left= job.data[@char.sex]['notes'].join(', ')
